;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; Transmit a mono or stereo I2S audio stream as stereo
; This is 16 bits per sample; can be altered by modifying the "set" params,
; or made programmable by replacing "set x" with "mov x, y" and using Y as a config register.
;
; Autopull must be enabled, with threshold set to 32.
; Since I2S is MSB-first, shift direction should be to left.
; Hence the format of the FIFO word is:
;
; | 31   :   16 | 15   :    0 |
; | sample ws=0 | sample ws=1 |
;
; Data is output at 1 bit per clock. Use clock divider to adjust frequency.
; Fractional divider will probably be needed to get correct bit clock period,
; but for common syslck freqs this should still give a constant word select period.
;
; One output pin is used for the data output.
; Two side-set pins are used. Bit 0 is clock, bit 1 is word select.

; Send 16 bit words to the PIO for mono, 32 bit words for stereo

; PICOTRACKER MOD:
; This has been modified from the standard i2s PIO program from RPI by adding a fixed amount
; of bits of offset from the MSB to lower the volume on picoTracker hardware that has very 
; high output gain on its audio output socket.
; The current value of 4 bits of offset was selected based on testing with several pairs of headphones
; and IEMs to allow for comfortable volume for me at master volume of 140.
;
; The modifications bare a little bit of explanation:
; The I2S output bitstream word length has been changed to 32bit BUT the input data has been
; untouched, so what the modified PIO code below does is insert a fixed amount of bits at the
; front of the real 16bit sample data and then fills in after the real data the remaining required
; number of bits to get to 32 in total. We can't *just* blindly preface 0 bits at the start of the 
; real data on the i2s output because the data in i2s is twos-complement so we need to preserve the
; real data's MSB on the i2s output bitstream so the i2s bitstream becomes:
; MSB+Copies of MSB+RestOfData+0-bits-Backfill


.program audio_i2s
.side_set 2

.define DATA_LOOP_COUNT 13 ; 13 because we do 2 `out`'s on the OSR data outside the loop for a total of 16bits
.define OFFSET_COUNT 6 ; number of bits+1 to offset from MSB to lower the output volume
.define BACKFILL_COUNT 7 ; number of bits+1 to fill in loop at end of OSR data to get to 32bits in total output per channel

                            ;      /--- LRCLK
                            ;      |/-- BCLK
bitloop1:                   ;      ||
    out pins, 1             side 0b10
    jmp x-- bitloop1        side 0b11

    out pins, 1             side 0b10 ; get the LSB of the real sample data from the OSR
    set y, BACKFILL_COUNT   side 0b11 ; now how many bits+1 of zeros we will backfill after LSB

 backfill1:   
    set pins, 0             side 0b10
    jmp y-- backfill1       side 0b11

    set pins, 0             side 0b00 ; Final LSB is a 0
    set x, DATA_LOOP_COUNT  side 0b01

    out pins, 1             side 0b00 ; twos complement so need to keep most significant Bit of real sample data
    set y, OFFSET_COUNT     side 0b01 ; now how many bits+1 of MSB we will pad from MSB

padloop1:
    nop                     side 0b00 ; Clocking out MSB for sign extension
    jmp y-- padloop1        side 0b01

bitloop0:
    out pins, 1             side 0b00
    jmp x-- bitloop0        side 0b01

    out pins, 1             side 0b00
    set y, BACKFILL_COUNT   side 0b01 ; now how many bits+1 of zeros we will backfill after LSB

  backfill0:   
    set pins, 0             side 0b00
    jmp y-- backfill0       side 0b01

    set pins, 0             side 0b10 ; Final LSB is a 0

;----
public entry_point:
    set x, DATA_LOOP_COUNT  side 0b11

    out pins, 1             side 0b10 ; twos complement so need to keep most significant Bit of real sample data
    set y, OFFSET_COUNT     side 0b11 ; now how many bits+1 of MSB we will pad from MSB

padloop0:
    nop                     side 0b10 ; Clocking out MSB for sign extension
    jmp y-- padloop0        side 0b11
     

% c-sdk {

static inline void audio_i2s_program_init(PIO pio, uint sm, uint offset, uint data_pin, uint clock_pin_base) {
    pio_sm_config sm_config = audio_i2s_program_get_default_config(offset);
    
    sm_config_set_out_pins(&sm_config, data_pin, 1);
    sm_config_set_set_pins(&sm_config, data_pin, 1);
    sm_config_set_sideset_pins(&sm_config, clock_pin_base);
    sm_config_set_out_shift(&sm_config, false, true, 32);

    pio_sm_init(pio, sm, offset, &sm_config);

    uint pin_mask = (1u << data_pin) | (3u << clock_pin_base);
    pio_sm_set_pindirs_with_mask(pio, sm, pin_mask, pin_mask);
    pio_sm_set_pins(pio, sm, 0); // clear pins

    pio_sm_exec(pio, sm, pio_encode_jmp(offset + audio_i2s_offset_entry_point));
}

%}