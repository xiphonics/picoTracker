cmake_minimum_required(VERSION 3.22)

#
# This file is generated only once,
# and is not re-generated if converter is called multiple times.
#
# User is free to modify the file as much as necessary
#

find_package(Python3 REQUIRED COMPONENTS Interpreter)

# Setup compiler settings
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS ON)


# Define the build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug")
endif()

# Enable compile command to ease indexing with e.g. clangd
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

# Core project settings
#project(${CMAKE_PROJECT_NAME})
message("Build type: " ${CMAKE_BUILD_TYPE})

# Enable CMake support for ASM and C languages
#enable_language(C ASM)

# Create an executable object type
add_executable(${CMAKE_PROJECT_NAME}
  # has implementation for _gettimeofday, _getentropy otherwise we get linker errors
  system/syscalls.c
)

# Add .bin output
add_custom_command(TARGET ${CMAKE_PROJECT_NAME} POST_BUILD
  # we fill gaps with 0xFF in order to make it the same as the flashed image when written as an elf
  # since flash erase state is 0xFF and elf writting skips gaps vs bin which is contiguous
  COMMAND ${CMAKE_OBJCOPY} -O binary --gap-fill=0xFF $<TARGET_FILE:${CMAKE_PROJECT_NAME}> ${CMAKE_PROJECT_NAME}.bin
  COMMENT "Generating ${CMAKE_PROJECT_NAME}.bin"
)

set(EMBED_CRC_SCRIPT ${CMAKE_SOURCE_DIR}/../tools/crc.py)

add_custom_command(TARGET ${CMAKE_PROJECT_NAME} POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E echo "Patching size and CRC32 into firmware..."
  COMMAND ${Python3_EXECUTABLE} ${EMBED_CRC_SCRIPT} ${CMAKE_PROJECT_NAME}
)

# Treat main.c generated by CubeMX as a C++ file
set_source_files_properties(Core/Src/main.c PROPERTIES LANGUAGE CXX)

# Add STM32CubeMX generated sources
#add_subdirectory(cmake/stm32cubemx)
# ------- cmake/stm32cubemx START -------

# STM32CubeMX generated symbols (macros)
set(MX_Defines_Syms 
	USE_PWR_LDO_SUPPLY 
	USE_HAL_DRIVER 
	STM32H743xx
    $<$<CONFIG:Debug>:DEBUG>
)

# STM32CubeMX generated include paths
set(MX_Include_Dirs
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Inc
#  ${CMAKE_CURRENT_SOURCE_DIR}/FATFS/Target
#  ${CMAKE_CURRENT_SOURCE_DIR}/FATFS/App
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Inc
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Inc/Legacy
#  ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/Third_Party/FatFs/src
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/CMSIS/Device/ST/STM32H7xx/Include
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/CMSIS/Include
)

# STM32CubeMX generated application sources
set(MX_Application_Src
#  ${CMAKE_CURRENT_SOURCE_DIR}/FATFS/Target/bsp_driver_sd.c
#  ${CMAKE_CURRENT_SOURCE_DIR}/FATFS/Target/sd_diskio.c
#  ${CMAKE_CURRENT_SOURCE_DIR}/FATFS/Target/fatfs_platform.c
#  ${CMAKE_CURRENT_SOURCE_DIR}/FATFS/App/fatfs.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/main.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/gpio.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/dma.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/dma2d.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/fmc.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/i2c.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/ltdc.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/memorymap.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/rng.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/sai.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/sdmmc.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/tim.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/usart.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/usb_otg.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/stm32h7xx_it.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/stm32h7xx_hal_msp.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/stm32h7xx_hal_timebase_tim.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/sysmem.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/syscalls.c
  ${CMAKE_CURRENT_SOURCE_DIR}/startup_stm32h743xx.s
)

# STM32 HAL/LL Drivers
set(STM32_Drivers_Src
  ${CMAKE_CURRENT_SOURCE_DIR}/Core/Src/system_stm32h7xx.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim_ex.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc_ex.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash_ex.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_hsem.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma_ex.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c_ex.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_exti.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma2d.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_fmc.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nor.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sram.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_nand.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sdram.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_ltdc.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_ltdc_ex.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rng.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rng_ex.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sai.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sai_ex.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_sdmmc.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_delayblock.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sd.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sd_ex.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mmc.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mmc_ex.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c
  ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart_ex.c
)

# Drivers Midllewares


#set(FatFs_Src
#  ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/Third_Party/FatFs/src/diskio.c
#  ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/Third_Party/FatFs/src/ff.c
#  ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/Third_Party/FatFs/src/ff_gen_drv.c
#  ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/Third_Party/FatFs/src/option/syscall.c
#  ${CMAKE_CURRENT_SOURCE_DIR}/Middlewares/Third_Party/FatFs/src/option/ccsbcs.c
#)

# Link directories setup
set(MX_LINK_DIRS

)
# Project static libraries
set(MX_LINK_LIBS 
    STM32_Drivers
#    FatFs
)
# picoTracker link libraries
set(PICOTRACKER_LINK_LIBS 
  platform_system
  system_console
  platform_mutex
  tinyusb
)
# Interface library for includes and symbols
add_library(stm32cubemx INTERFACE)
target_include_directories(stm32cubemx INTERFACE ${MX_Include_Dirs})
target_compile_definitions(stm32cubemx INTERFACE ${MX_Defines_Syms})

#message(STATUS "Properties of stm32cubemx:")
#get_target_property(A_TYPE stm32cubemx TYPE)
#get_target_property(A_INCLUDES stm32cubemx INTERFACE_INCLUDE_DIRECTORIES)
#get_target_property(A_DEFINES stm32cubemx INTERFACE_COMPILE_DEFINITIONS)
#message(STATUS "Type: ${A_TYPE}")
#message(STATUS "Includes: ${A_INCLUDES}")
#message(STATUS "Definitions: ${A_DEFINES}")

# Explicitly set the include directories and compile definitions
message(STATUS "Interface include directories for A:")
get_target_property(A_INTERFACE_INCLUDE stm32cubemx INTERFACE_INCLUDE_DIRECTORIES)
message(STATUS "${A_INTERFACE_INCLUDE}")

# Create STM32_Drivers static library
add_library(STM32_Drivers OBJECT)
target_sources(STM32_Drivers PRIVATE ${STM32_Drivers_Src})

target_compile_options(picoTrackerAdvance PRIVATE
    # MCU and FPU flags (apply to both C and C++)
    -mcpu=cortex-m7
    -mfpu=fpv5-d16
    -mfloat-abi=hard

    # General compiler flags (apply to both C and C++)
    -Wall
    -Wextra
    -fdata-sections
    -ffunction-sections

    # --- C++ SPECIFIC FLAGS ---
    # Use a generator expression to apply these only to C++ files
    $<$<COMPILE_LANGUAGE:CXX>:-fno-rtti>
    $<$<COMPILE_LANGUAGE:CXX>:-fno-exceptions>
    $<$<COMPILE_LANGUAGE:CXX>:-fno-threadsafe-statics>
)

target_link_options(picoTrackerAdvance PRIVATE
    -mcpu=cortex-m7
    -mfpu=fpv5-d16
    -mfloat-abi=hard

    # --specs=nosys.specs
    # Use the nano C library spec
    --specs=nano.specs

    # Linker script
    "-T${CMAKE_CURRENT_SOURCE_DIR}/STM32H743XX_FLASH.ld"

    # Generate a map file and enable garbage collection
    -Wl,-Map=${CMAKE_PROJECT_NAME}.map
    -Wl,--gc-sections

    # Print memory usage statistics
    -Wl,--print-memory-usage

  # This is required to link the newlib-nano floating-point libraries
    -u _printf_float

    # Link against the standard C and math libraries
    -Wl,--start-group
    -lc
    -lm
    -lstdc++
    -lsupc++
    -Wl,--end-group
)

target_link_libraries(STM32_Drivers PUBLIC stm32cubemx)

# Create FatFs static library
#add_library(FatFs OBJECT)
#target_sources(FatFs PRIVATE ${FatFs_Src})
#target_link_libraries(FatFs PUBLIC stm32cubemx)

# Add STM32CubeMX generated application sources to the project
target_sources(${CMAKE_PROJECT_NAME} PRIVATE ${MX_Application_Src})

# Link directories setup
target_link_directories(${CMAKE_PROJECT_NAME} PRIVATE ${MX_LINK_DIRS})

# Add libraries to the project
target_link_libraries(${CMAKE_PROJECT_NAME} ${MX_LINK_LIBS} ${PICOTRACKER_LINK_LIBS})

# Add the map file to the list of files to be removed with 'clean' target
set_target_properties(${CMAKE_PROJECT_NAME} PROPERTIES ADDITIONAL_CLEAN_FILES ${CMAKE_PROJECT_NAME}.map)

# Validate that STM32CubeMX code is compatible with C standard
if((CMAKE_C_STANDARD EQUAL 90) OR (CMAKE_C_STANDARD EQUAL 99))
    message(ERROR "Generated code requires C11 or higher")
endif()
# ------- cmake/stm32cubemx STOP -------



# Link directories setup
target_link_directories(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user defined library search paths
)

# Add sources to executable
target_sources(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user sources here
)

# Add include paths
target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user defined include paths
    ${PROJECT_SOURCE_DIR}
)

# Add project symbols (macros)
target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user defined symbols
)

# Add linked libraries
target_link_libraries(${CMAKE_PROJECT_NAME}
    stm32cubemx
    # Add user defined libraries
)
message(STATUS "Properties of picoTracker:")
get_target_property(A_TYPE picoTrackerAdvance TYPE)
get_target_property(A_INCLUDES picoTrackerAdvance INTERFACE_INCLUDE_DIRECTORIES)
get_target_property(A_DEFINES picoTrackerAdvance INTERFACE_COMPILE_DEFINITIONS)
message(STATUS "Type: ${A_TYPE}")
message(STATUS "Includes: ${A_INCLUDES}")
message(STATUS "Definitions: ${A_DEFINES}")

add_subdirectory(system)
add_subdirectory(gui)
add_subdirectory(timer)
add_subdirectory(display)
add_subdirectory(audio)
add_subdirectory(utils)
add_subdirectory(midi)
add_subdirectory(filesystem)
add_subdirectory(platform)
add_subdirectory(mutex)
add_subdirectory(sdcard)
add_subdirectory(usb)
